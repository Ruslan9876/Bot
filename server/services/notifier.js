/**
 * –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
 */

const db = require('../database');

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (info/warning/critical)
 */
async function sendNotification(userId, message, type = 'info') {
    try {
        // –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await new Promise((resolve, reject) => {
            db.get('SELECT telegram_id, full_name FROM users WHERE id = ?', [userId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (!user || !user.telegram_id) {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç telegram_id`);
            return false;
        }

        const telegramId = user.telegram_id;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let emoji = 'üìä';
        if (type === 'warning') emoji = '‚ö†Ô∏è';
        if (type === 'critical') emoji = 'üö®';

        const fullMessage = `${emoji} ${message}`;

        // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram Bot API
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.full_name} (${telegramId}):`);
        console.log(`   –¢–∏–ø: ${type}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${fullMessage}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await saveNotification(userId, type, message);

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
async function sendNormalNotification(userId, message) {
    return sendNotification(userId, message, 'info');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
async function sendWarningNotification(userId, message) {
    return sendNotification(userId, message, 'warning');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
async function sendCriticalAlert(userId, message) {
    return sendNotification(userId, message, 'critical');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–∑–º–µ—Ä–µ–Ω–∏–∏
 */
async function sendReminder(userId, message) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const settings = await new Promise((resolve, reject) => {
            db.get('SELECT reminders_enabled FROM reminders WHERE user_id = ?', [userId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        if (!settings || settings.reminders_enabled === 1) {
            return sendNotification(userId, `‚è∞ ${message}`, 'info');
        }

        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤—Ä–∞—á—É
 */
async function sendReportToDoctor(userId, report) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä–∞—á–∞
        const doctor = await new Promise((resolve, reject) => {
            db.get('SELECT doctor_telegram_id, doctor_name FROM doctor_contacts WHERE user_id = ?', [userId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (!doctor || !doctor.doctor_telegram_id) {
            console.log(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä–∞—á–∞`);
            return false;
        }

        const message = `üìã **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢**\n\n${report}`;

        // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram Bot API
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤—Ä–∞—á—É ${doctor.doctor_name} (${doctor.doctor_telegram_id}):`);
        console.log(message);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await saveNotification(userId, 'report', `–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä–∞—á—É: ${doctor.doctor_name}`);

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –≤—Ä–∞—á—É:', error);
        return false;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
async function saveNotification(userId, type, message) {
    return new Promise((resolve, reject) => {
        const query = `
            INSERT INTO notifications (user_id, type, message, created_at)
            VALUES (?, ?, ?, datetime('now'))
        `;
        db.run(query, [userId, type, message], (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getNotificationHistory(userId, limit = 50) {
    return new Promise((resolve, reject) => {
        const query = `
            SELECT * FROM notifications 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        `;
        db.all(query, [userId, limit], (err, rows) => {
            if (err) reject(err);
            else resolve(rows || []);
        });
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)
 */
function initializeTelegramBot(botToken) {
    // TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è node-telegram-bot-api
    console.log('ü§ñ Telegram Bot API –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:', botToken ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');
    console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
    console.log('   1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather');
    console.log('   2. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
    console.log('   3. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª (TELEGRAM_BOT_TOKEN)');
    console.log('   4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –¥–ª—è —Å–≤—è–∑–∏');
}

module.exports = {
    sendNotification,
    sendNormalNotification,
    sendWarningNotification,
    sendCriticalAlert,
    sendReminder,
    sendReportToDoctor,
    getNotificationHistory,
    initializeTelegramBot
};
